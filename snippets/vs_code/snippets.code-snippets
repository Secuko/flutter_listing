{
  "BLoC class": {
    "scope": "flutter, dart",
    "prefix": [
      "create_bloc"
    ],
    "description": "Snippet for create BLoC class",
    "body": [
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "",
      "sealed class ${Name}Event {",
      "  const ${Name}Event();",
      "}",
      "",
      "final class ${Name}EventLoad extends ${Name}Event {",
      "  const ${Name}EventLoad();",
      "}",
      "",
      "final class ${Name}EventChangeData extends ${Name}Event {",
      "  ${Name}EventChangeData({required this.data});",
      "",
      "  final ${Name}Model data;",
      "}",
      "",
      "sealed class ${Name}State {",
      "  const ${Name}State();",
      "",
      "  ${Name}Model get data => switch (this) {",
      "        final ${Name}StateIdle state => state.data,",
      "        final ${Name}StateLoading state => state.data,",
      "        final ${Name}StateSuccess state => state.data,",
      "        final ${Name}StateError state => state.data,",
      "      };",
      "",
      "  bool get isSuccess => switch (this) {",
      "    final ${Name}StateSuccess _ => true,",
      "    _ => false,",
      "  };",
      "",
      "  bool get isLoading => switch (this) {",
      "        final ${Name}StateLoading _ => true,",
      "        _ => false,",
      "      };",
      "",
      "  bool get isError => switch (this) {",
      "        final ${Name}StateError _ => true,",
      "        _ => false,",
      "      };",
      "",
      "  String? get error => switch (this) {",
      "        final ${Name}StateError state => state.error,",
      "        _ => null,",
      "      };",
      "",
      "  NetworkError? get networkError => switch (this) {",
      "        final ${Name}StateError state => state.networkError,",
      "        _ => null,",
      "      };",
      "}",
      "",
      "final class ${Name}StateIdle extends ${Name}State {",
      "  ${Name}StateIdle({required this.data});",
      "",
      "  @override",
      "  final ${Name}Model data;",
      "}",
      "",
      "final class ${Name}StateLoading extends ${Name}State {",
      "  ${Name}StateLoading({required this.data});",
      "",
      "  @override",
      "  final ${Name}Model data;",
      "}",
      "",
      "final class ${Name}StateSuccess extends ${Name}State {",
      "  ${Name}StateSuccess({required this.data});",
      "",
      "  @override",
      "  final ${Name}Model data;",
      "}",
      "",
      "final class ${Name}StateError extends ${Name}State {",
      "  ${Name}StateError({",
      "    required this.data,",
      "    this.error,",
      "    this.networkError,",
      "  });",
      "",
      "  @override",
      "  final ${Name}Model data;",
      "",
      "  @override",
      "  final String? error;",
      "",
      "  @override",
      "  final NetworkError? networkError;",
      "}",
      "",
      "class ${Name}Bloc extends Bloc<${Name}Event, ${Name}State> {",
      "  ${Name}Bloc({",
      "    required I${Name}Repository repository,",
      "  })  : _repository = repository,",
      "        super(${Name}StateIdle(data: ${Name}Model.empty())) {",
      "    on<${Name}Event>(",
      "      (event, emitter) async => switch (event) {",
      "        final ${Name}EventLoad _ => _load(emitter),",
      "        final ${Name}EventChangeData event => _changeData(event, emitter),",
      "      },",
      "    );",
      "  }",
      "",
      "  final I${Name}Repository _repository;",
      "",
      "  Future<void> _load(",
      "    Emitter<${Name}State> emitter,",
      "  ) async {",
      "    emitter.call(${Name}StateLoading(data: state.data));",
      "    await _executor(",
      "      emitter,",
      "      func: () async {",
      "        emitter.call(${Name}StateSuccess(data: state.data));",
      "      },",
      "    );",
      "  }",
      "",
      "  Future<void> _changeData(",
      "    ${Name}EventChangeData event,",
      "    Emitter<${Name}State> emitter,",
      "  ) async {",
      "    emitter.call(${Name}StateIdle(data: event.data));",
      "  }",
      "",
      "  Future<void> _executor(",
      "    Emitter<${Name}State> emitter, {",
      "    required Future<void> Function() func,",
      "  }) async {",
      "    try {",
      "      await func();",
      "    } on ResponseError catch (e) {",
      "      emitter",
      "        ..call(${Name}StateError(networkError: NetworkError.fromError(e), data: state.data))",
      "        ..call(",
      "          ${Name}StateIdle(data: state.data),",
      "        );",
      "      rethrow;",
      "    } on Object catch (_) {",
      "      emitter",
      "        ..call(${Name}StateError(data: state.data))",
      "        ..call(",
      "          ${Name}StateIdle(data: state.data),",
      "        );",
      "      rethrow;",
      "    }",
      "  }",
      "}"
    ],
  },
  "Data Source": {
    "prefix": "create_data_source",
    "description": "Snippet for create data source class",
    "body": [
      "class ${Name}DataSource with HeadersMixin {",
      "  ${Name}DataSource({",
      "    required this.client,",
      "  });",
      "",
      "  final BaseClient client;",
      "",
      "  @override",
      "  Future<List<${Name}Model>> get${Name}() async {",
      "    final response = await client.get<List<dynamic>>(",
      "      '',",
      "    );",
      "    final cast = response.data!.cast<Map<String, dynamic>>();",
      "    return cast.map(${Name}Model.fromJson).toList();",
      "  }",
      "}",
      ""
    ],
  },
  "Listener": {
    "prefix": "create_listener",
    "description": "Snippet for create listener class",
    "body": [
      "import 'package:auto_route/auto_route.dart';",
      "import 'package:flutter/material.dart';",
      "import 'package:scope/scope.dart';",
      "",
      "class ${Name}Listener extends StatelessWidget {",
      "  const ${Name}Listener({",
      "    required this.child,",
      "    super.key,",
      "  });",
      "",
      "  final Widget child;",
      "",
      "  static void _listener(BuildContext context, ${Name}State state) {",
      "    switch (state) {",
      "      case final ${Name}StateSuccess _:",
      "        {",
      "",
      "        }",
      "      default:",
      "        null;",
      "    }",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return StreamListener(",
      "      listener: _listener,",
      "      stream: ${Name}Scope.streamOf,",
      "      child: child,",
      "    );",
      "  }",
      "}",
      ""
    ],
  },
  "Freezed model": {
    "prefix": "create_model",
    "description": "Snippet for create freezed model class",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${name}_model.freezed.dart';",
      "",
      "part '${name}_model.g.dart';",
      "",
      "@freezed",
      "class ${Name}Model with _$${Name}Model {",
      "  factory ${Name}Model({",
      "    required String accountId,",
      "  }) = _${Name}Model;",
      "",
      "  factory ${Name}Model.fromJson(Map<String, dynamic> json) => _$${Name}ModelFromJson(json);",
      "",
      "  factory ${Name}Model.empty() => ${Name}Model(accountId: '');",
      "",
      "  ${Name}Model._();",
      "}",
      ""
    ],
  },
  "Repository": {
    "prefix": "create_repository",
    "description": "Snippet for create repository class",
    "body": [
      "class ${Name}Repository {",
      "  const ${Name}Repository({",
      "    required I${Name}DataSource remoteDataSource,",
      "    required ILocalStorage localStorage,",
      "  })  : _remoteDataSource = remoteDataSource,",
      "        _localStorage = localStorage;",
      "",
      "  final I${Name}DataSource _remoteDataSource;",
      "  final ILocalStorage _localStorage;",
      "",
      "  @override",
      "  Future<List<${Name}Model>> get$Name() async {",
      "    final token = _localStorage.getToken()!;",
      "    final response = await _remoteDataSource.get$Name(token.accessToken);",
      "    return response;",
      "  }",
      "}",
      ""
    ],
  },
  "Scope": {
    "prefix": "create_scope",
    "description": "Snippet for create  scope class",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "import 'package:scope/scope.dart';",
      "",
      "class ${Name}Scope extends StatelessWidget {",
      "  const ${Name}Scope({required this.child, super.key});",
      "",
      "  final Widget child;",
      "",
      "  static const BlocScope<${Name}Event, ${Name}State, ${Name}Bloc> _scope = BlocScope();",
      "",
      "  // --- Data --- //",
      "",
      "  static ScopeData<${Name}Model> get data => _scope.select((state) => state.data);",
      "",
      "  static ScopeData<String?> get error => _scope.select((state) => state.error);",
      "",
      "  static ScopeData<bool> get isLoadingState => _scope.select((state) => state.isLoading);",
      "",
      "  static ScopeData<bool> get isSuccessState => _scope.select((state) => state.isSuccess);",
      "",
      "  static ScopeData<bool> get isErrorState => _scope.select((state) => state.isError);",
      "",
      "  static Stream<${Name}State> streamOf(BuildContext context) => _scope.bloc(context).stream;",
      "",
      "  static void load(BuildContext context) {",
      "    _scope.bloc(context).add(const ${Name}EventLoad());",
      "  }",
      "",
      "  static void changeId(BuildContext context, {required int value}) {",
      "    final _data = data(context);",
      "    _scope.bloc(context).add(",
      "          ${Name}EventChangeData(",
      "            data: _data.copyWith(accountId: value),",
      "          ),",
      "        );",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final repositories = DependenciesScope.repositories(context);",
      "    return BlocProvider(",
      "      create: (_) => ${Name}Bloc(",
      "        repository: repositories.repository,",
      "      ),",
      "      child: child,",
      "    );",
      "  }",
      "}",
      ""
    ],
  }
}